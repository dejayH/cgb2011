知识回顾：
1、事务 transaction
	spring框架，service服务类，
	业务会多个步骤，一句代码都看不到，默认集成@Transaction
	分布式，互联网架构（电商），大数据 PB=1024TB，EB=1024PB
	分布式结构复杂，比如：其中一台机器宕机，磁盘突然坏，网络突然断掉
	分布式事务
2、事务概念 ACID，4个特性
	a. 原则性：多步操作，要么都成功，要么都失败
	b. 一致性：数据总量不变，一遍扣，一遍加，不能出现数据错乱
	c. 隔离性：多个用户使用，不能交织，相互隔离，不会互相影响
	d. 持久性：关系型数据库最大特点，数据操作成功，数据落地，保存到磁盘中3、SQL语句
	mysql自动提交，oracle手动提交
	a. 设置环境变量 @@autocommit = 1自动提交,0手动提交
	b. 事务开启	begin;
	c. 执行多步操作	...
	d. 成功		commit;
	e. 某步出错	rollback;	

	保存点savepoint（检查点checkpoint spark）
	初学者：开阔思路，了解新知识，定义（面试），应用（初级程序员）
	干过：更多思考背后原理，编程思想，高级程序员

4、* 多表联查
	a. where 死查，提前构建笛卡尔积，然后在过滤数据
	b. 内连接 inner join
	c. 左（外）连接 left join	万能
	d. 右（外）连接 right join


	部门和用户
	先录入部门，然后录入部门下的用户，外键约束
	左连接把左边的表的记录全展示，右边没有null填充
	右连接把右边的表的记录全展示，左边没有null填充
	如果左边右边都没有多余数据，内连接=左连接=右连接

	
	2种方式
	a. 早期
		口诀：
		1）先各自查询写出来，设置别名 dept d，emp e
		2）left join on条件 主键=外键
		3）挑选字段，如果字段没有重复直接写，如果重复，必须别名.（具体指定某个表）

SELECT 
	a.id,b.id,NAME,age
FROM
(SELECT id,NAME FROM a) a
LEFT JOIN
(SELECT bid,id,age FROM b) b
ON a.id=b.bid

	b. 简洁
SELECT a.id,NAME,age FROM
a LEFT JOIN b
ON a.id=b.bid


表设计：
概要设计和详细设计阶段
系统分析师（高级程序员）
UML 类图，序列图，usecase图，。。。帮助我们了解整个系统
类图：伪代码

PowerDesigner 表设计独一无二的
1）图形化展示，一目了然整个系统有多少张表，哪些表有关系，哪些表没有关系
表中字段

new model 新建模型
选择 model types 模型类型
选择 Physical Data Model PDM物理数据模型

选择DBMS（database manage system）数据库管理系统
选择mysql 5.0

记住几个小图标：
a. Globale View 全局预览
b. 放大镜，点击放大
c. 缩写镜，点击缩小
d. Table 表，创建一个表，一次创建多个，点鼠标右键结束

2）PD根据选择数据库生成对应SQL语句
3）直接执行创建SQL，把表和表的关系等语句，创建到数据库中

表设计做完，怎么把它和数据库挂钩？
1）选择某张表，拷贝它的sql语句，到mysql客户端中执行
2）利用PD可以一次生成所有表的语句，复制到mysql客户端中执行

生成sql脚本，里面有创建表，表外键关联
注意：不要外键创建的SQL语句
不设置外键，开发更加灵活，不会有外键来干扰
开发者输入前后顺序，没有顺序性
数据一致性就需要开发者自己手工维护

PD中选择“数据库”
再选择“generate database”
再选择 preview
不拷贝外键的语句，其他复制
粘贴到sqlYog中执行即可





